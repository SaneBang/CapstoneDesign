// Generated by gencpp from file Jongseol/objs.msg
// DO NOT EDIT!


#ifndef JONGSEOL_MESSAGE_OBJS_H
#define JONGSEOL_MESSAGE_OBJS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <Jongseol/obj.h>

namespace Jongseol
{
template <class ContainerAllocator>
struct objs_
{
  typedef objs_<ContainerAllocator> Type;

  objs_()
    : num(0)
    , obj()  {
    }
  objs_(const ContainerAllocator& _alloc)
    : num(0)
    , obj(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _num_type;
  _num_type num;

   typedef std::vector< ::Jongseol::obj_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::Jongseol::obj_<ContainerAllocator> >> _obj_type;
  _obj_type obj;





  typedef boost::shared_ptr< ::Jongseol::objs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Jongseol::objs_<ContainerAllocator> const> ConstPtr;

}; // struct objs_

typedef ::Jongseol::objs_<std::allocator<void> > objs;

typedef boost::shared_ptr< ::Jongseol::objs > objsPtr;
typedef boost::shared_ptr< ::Jongseol::objs const> objsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Jongseol::objs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Jongseol::objs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Jongseol::objs_<ContainerAllocator1> & lhs, const ::Jongseol::objs_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.obj == rhs.obj;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Jongseol::objs_<ContainerAllocator1> & lhs, const ::Jongseol::objs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Jongseol

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::Jongseol::objs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Jongseol::objs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Jongseol::objs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Jongseol::objs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Jongseol::objs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Jongseol::objs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Jongseol::objs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "789bc1e6255eb45d2bff2d818b83b6cb";
  }

  static const char* value(const ::Jongseol::objs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x789bc1e6255eb45dULL;
  static const uint64_t static_value2 = 0x2bff2d818b83b6cbULL;
};

template<class ContainerAllocator>
struct DataType< ::Jongseol::objs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Jongseol/objs";
  }

  static const char* value(const ::Jongseol::objs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Jongseol::objs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 num\n"
"\n"
"obj[] obj\n"
"================================================================================\n"
"MSG: Jongseol/obj\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"float32 dx\n"
"float32 dy\n"
"float32 dz\n"
;
  }

  static const char* value(const ::Jongseol::objs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Jongseol::objs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.obj);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct objs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Jongseol::objs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Jongseol::objs_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
    s << indent << "obj[]" << std::endl;
    for (size_t i = 0; i < v.obj.size(); ++i)
    {
      s << indent << "  obj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::Jongseol::obj_<ContainerAllocator> >::stream(s, indent + "    ", v.obj[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JONGSEOL_MESSAGE_OBJS_H
