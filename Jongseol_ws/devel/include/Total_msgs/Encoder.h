// Generated by gencpp from file Total_msgs/Encoder.msg
// DO NOT EDIT!


#ifndef TOTAL_MSGS_MESSAGE_ENCODER_H
#define TOTAL_MSGS_MESSAGE_ENCODER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Total_msgs
{
template <class ContainerAllocator>
struct Encoder_
{
  typedef Encoder_<ContainerAllocator> Type;

  Encoder_()
    : s16_RightWheelRPM(0)
    , s16_LeftWheelRPM(0)  {
    }
  Encoder_(const ContainerAllocator& _alloc)
    : s16_RightWheelRPM(0)
    , s16_LeftWheelRPM(0)  {
  (void)_alloc;
    }



   typedef int16_t _s16_RightWheelRPM_type;
  _s16_RightWheelRPM_type s16_RightWheelRPM;

   typedef int16_t _s16_LeftWheelRPM_type;
  _s16_LeftWheelRPM_type s16_LeftWheelRPM;





  typedef boost::shared_ptr< ::Total_msgs::Encoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Total_msgs::Encoder_<ContainerAllocator> const> ConstPtr;

}; // struct Encoder_

typedef ::Total_msgs::Encoder_<std::allocator<void> > Encoder;

typedef boost::shared_ptr< ::Total_msgs::Encoder > EncoderPtr;
typedef boost::shared_ptr< ::Total_msgs::Encoder const> EncoderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Total_msgs::Encoder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Total_msgs::Encoder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Total_msgs::Encoder_<ContainerAllocator1> & lhs, const ::Total_msgs::Encoder_<ContainerAllocator2> & rhs)
{
  return lhs.s16_RightWheelRPM == rhs.s16_RightWheelRPM &&
    lhs.s16_LeftWheelRPM == rhs.s16_LeftWheelRPM;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Total_msgs::Encoder_<ContainerAllocator1> & lhs, const ::Total_msgs::Encoder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Total_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::Total_msgs::Encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Total_msgs::Encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Total_msgs::Encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Total_msgs::Encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Total_msgs::Encoder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Total_msgs::Encoder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Total_msgs::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d59fd6af93a0eea245e13bc69f96d575";
  }

  static const char* value(const ::Total_msgs::Encoder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd59fd6af93a0eea2ULL;
  static const uint64_t static_value2 = 0x45e13bc69f96d575ULL;
};

template<class ContainerAllocator>
struct DataType< ::Total_msgs::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Total_msgs/Encoder";
  }

  static const char* value(const ::Total_msgs::Encoder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Total_msgs::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 s16_RightWheelRPM\n"
"int16 s16_LeftWheelRPM\n"
;
  }

  static const char* value(const ::Total_msgs::Encoder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Total_msgs::Encoder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s16_RightWheelRPM);
      stream.next(m.s16_LeftWheelRPM);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Total_msgs::Encoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Total_msgs::Encoder_<ContainerAllocator>& v)
  {
    s << indent << "s16_RightWheelRPM: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s16_RightWheelRPM);
    s << indent << "s16_LeftWheelRPM: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s16_LeftWheelRPM);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOTAL_MSGS_MESSAGE_ENCODER_H
